/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* MainProgram := prog=Program $
* Program := x={y={_? statement=Statement _B?} | _B}*
* Block := '{' _B? program=Program '}'
* Expression := sub={'\(' _? val=Expression _? '\)'} | Comparison | Maths | Identifier | Int | String | Coordinate
* Statement := VariableInit | VariableDeclaration | FunctionDeclaration | FunctionCall | Assignment
* Maths := left=Expression _? op={'\+' | '-' | '\*' | '\/' | '\%'} _? right=Expression
* CoordinateValue := relative={'~' _? pos=Int?} | local={'^' _? pos=Int?} | absolute=Int
* Coordinate := '<' _? x=CoordinateValue _? ',' _? y=CoordinateValue _? ',' _? z=CoordinateValue _? '>'
* IdentifierList := list={val=Identifier _? ',' _?}* _? last=Identifier
* DecoratorItem := name=Identifier _? args={'\(' _? args=ArgumentsList _? '\)'}?
* DecoratorList := first=DecoratorItem _? list={',' _? item=DecoratorItem _?}*
* Decorator := '#\[' _? items=DecoratorList _? '\]'
* DecoratorPart := decorator=Decorator _B?
* VariableDeclaration := decorator=DecoratorPart? 'var' _ name=Identifier _? ':' _? type=Identifier
* VariableInit := decl=VariableDeclaration _? '=' _? value={FunctionCall | Expression}
* Assignment := variable=Identifier _? '=' _? value={FunctionCall | Expression}
* // todo: support arguments
* FunctionDeclaration := decorator=DecoratorPart? 'fn' _ name=Identifier _? '\(\)' _B? block=Block
* PositionalArgument := Expression | Block
* NamedArgument := name=Identifier _? '=' _? value={Expression | Block}
* Argument := NamedArgument | PositionalArgument
* ArgumentsList := list={arg=Argument _? ',' _?}* _? last=Argument?
* FunctionCall := fn=Identifier _? '\(' _? args=ArgumentsList _? '\)' _B? lastFnArg=Block?
* Compare := CompareEqual | CompareNotEqual | CompareGreaterThan | CompareLessThan | CompareGreaterThanOrEqual | CompareLessThanOrEqual
* Comparison := left=Expression _? comparison=Compare _? right=Expression
* CompareEqual := '=='
* CompareNotEqual := '!='
* CompareGreaterThan := '>'
* CompareLessThan := '<'
* CompareGreaterThanOrEqual := '>='
* CompareLessThanOrEqual := '<='
* String := value='"(\\.|[^"\\])*"'
* Identifier := value='[a-zA-Z][a-zA-Z0-9_]*'
* Int := value='[0-9]+'
* // whitespace
* _ := _ws='\s+'
* _B := _ws='(?:\s+|(?:\n)|(?:\/\/.*(?:\n|$)))+'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    MainProgram = "MainProgram",
    Program = "Program",
    Program_$0_1 = "Program_$0_1",
    Program_$0_2 = "Program_$0_2",
    Program_$0_$0 = "Program_$0_$0",
    Block = "Block",
    Expression_1 = "Expression_1",
    Expression_2 = "Expression_2",
    Expression_3 = "Expression_3",
    Expression_4 = "Expression_4",
    Expression_5 = "Expression_5",
    Expression_6 = "Expression_6",
    Expression_7 = "Expression_7",
    Expression_$0 = "Expression_$0",
    Statement_1 = "Statement_1",
    Statement_2 = "Statement_2",
    Statement_3 = "Statement_3",
    Statement_4 = "Statement_4",
    Statement_5 = "Statement_5",
    Maths = "Maths",
    Maths_$0_1 = "Maths_$0_1",
    Maths_$0_2 = "Maths_$0_2",
    Maths_$0_3 = "Maths_$0_3",
    Maths_$0_4 = "Maths_$0_4",
    Maths_$0_5 = "Maths_$0_5",
    CoordinateValue_1 = "CoordinateValue_1",
    CoordinateValue_2 = "CoordinateValue_2",
    CoordinateValue_3 = "CoordinateValue_3",
    CoordinateValue_$0 = "CoordinateValue_$0",
    CoordinateValue_$1 = "CoordinateValue_$1",
    Coordinate = "Coordinate",
    IdentifierList = "IdentifierList",
    IdentifierList_$0 = "IdentifierList_$0",
    DecoratorItem = "DecoratorItem",
    DecoratorItem_$0 = "DecoratorItem_$0",
    DecoratorList = "DecoratorList",
    DecoratorList_$0 = "DecoratorList_$0",
    Decorator = "Decorator",
    DecoratorPart = "DecoratorPart",
    VariableDeclaration = "VariableDeclaration",
    VariableInit = "VariableInit",
    VariableInit_$0_1 = "VariableInit_$0_1",
    VariableInit_$0_2 = "VariableInit_$0_2",
    Assignment = "Assignment",
    Assignment_$0_1 = "Assignment_$0_1",
    Assignment_$0_2 = "Assignment_$0_2",
    FunctionDeclaration = "FunctionDeclaration",
    PositionalArgument_1 = "PositionalArgument_1",
    PositionalArgument_2 = "PositionalArgument_2",
    NamedArgument = "NamedArgument",
    NamedArgument_$0_1 = "NamedArgument_$0_1",
    NamedArgument_$0_2 = "NamedArgument_$0_2",
    Argument_1 = "Argument_1",
    Argument_2 = "Argument_2",
    ArgumentsList = "ArgumentsList",
    ArgumentsList_$0 = "ArgumentsList_$0",
    FunctionCall = "FunctionCall",
    Compare_1 = "Compare_1",
    Compare_2 = "Compare_2",
    Compare_3 = "Compare_3",
    Compare_4 = "Compare_4",
    Compare_5 = "Compare_5",
    Compare_6 = "Compare_6",
    Comparison = "Comparison",
    CompareEqual = "CompareEqual",
    CompareNotEqual = "CompareNotEqual",
    CompareGreaterThan = "CompareGreaterThan",
    CompareLessThan = "CompareLessThan",
    CompareGreaterThanOrEqual = "CompareGreaterThanOrEqual",
    CompareLessThanOrEqual = "CompareLessThanOrEqual",
    String = "String",
    Identifier = "Identifier",
    Int = "Int",
    _ = "_",
    _B = "_B",
    $EOF = "$EOF",
}
export interface MainProgram {
    kind: ASTKinds.MainProgram;
    prog: Program;
}
export interface Program {
    kind: ASTKinds.Program;
    x: Program_$0[];
}
export type Program_$0 = Program_$0_1 | Program_$0_2;
export interface Program_$0_1 {
    kind: ASTKinds.Program_$0_1;
    y: Program_$0_$0;
}
export type Program_$0_2 = _B;
export interface Program_$0_$0 {
    kind: ASTKinds.Program_$0_$0;
    statement: Statement;
}
export interface Block {
    kind: ASTKinds.Block;
    program: Program;
}
export type Expression = Expression_1 | Expression_2 | Expression_3 | Expression_4 | Expression_5 | Expression_6 | Expression_7;
export interface Expression_1 {
    kind: ASTKinds.Expression_1;
    sub: Expression_$0;
}
export type Expression_2 = Comparison;
export type Expression_3 = Maths;
export type Expression_4 = Identifier;
export type Expression_5 = Int;
export type Expression_6 = String;
export type Expression_7 = Coordinate;
export interface Expression_$0 {
    kind: ASTKinds.Expression_$0;
    val: Expression;
}
export type Statement = Statement_1 | Statement_2 | Statement_3 | Statement_4 | Statement_5;
export type Statement_1 = VariableInit;
export type Statement_2 = VariableDeclaration;
export type Statement_3 = FunctionDeclaration;
export type Statement_4 = FunctionCall;
export type Statement_5 = Assignment;
export interface Maths {
    kind: ASTKinds.Maths;
    left: Expression;
    op: Maths_$0;
    right: Expression;
}
export type Maths_$0 = Maths_$0_1 | Maths_$0_2 | Maths_$0_3 | Maths_$0_4 | Maths_$0_5;
export type Maths_$0_1 = string;
export type Maths_$0_2 = string;
export type Maths_$0_3 = string;
export type Maths_$0_4 = string;
export type Maths_$0_5 = string;
export type CoordinateValue = CoordinateValue_1 | CoordinateValue_2 | CoordinateValue_3;
export interface CoordinateValue_1 {
    kind: ASTKinds.CoordinateValue_1;
    relative: CoordinateValue_$0;
}
export interface CoordinateValue_2 {
    kind: ASTKinds.CoordinateValue_2;
    local: CoordinateValue_$1;
}
export interface CoordinateValue_3 {
    kind: ASTKinds.CoordinateValue_3;
    absolute: Int;
}
export interface CoordinateValue_$0 {
    kind: ASTKinds.CoordinateValue_$0;
    pos: Nullable<Int>;
}
export interface CoordinateValue_$1 {
    kind: ASTKinds.CoordinateValue_$1;
    pos: Nullable<Int>;
}
export interface Coordinate {
    kind: ASTKinds.Coordinate;
    x: CoordinateValue;
    y: CoordinateValue;
    z: CoordinateValue;
}
export interface IdentifierList {
    kind: ASTKinds.IdentifierList;
    list: IdentifierList_$0[];
    last: Identifier;
}
export interface IdentifierList_$0 {
    kind: ASTKinds.IdentifierList_$0;
    val: Identifier;
}
export interface DecoratorItem {
    kind: ASTKinds.DecoratorItem;
    name: Identifier;
    args: Nullable<DecoratorItem_$0>;
}
export interface DecoratorItem_$0 {
    kind: ASTKinds.DecoratorItem_$0;
    args: ArgumentsList;
}
export interface DecoratorList {
    kind: ASTKinds.DecoratorList;
    first: DecoratorItem;
    list: DecoratorList_$0[];
}
export interface DecoratorList_$0 {
    kind: ASTKinds.DecoratorList_$0;
    item: DecoratorItem;
}
export interface Decorator {
    kind: ASTKinds.Decorator;
    items: DecoratorList;
}
export interface DecoratorPart {
    kind: ASTKinds.DecoratorPart;
    decorator: Decorator;
}
export interface VariableDeclaration {
    kind: ASTKinds.VariableDeclaration;
    decorator: Nullable<DecoratorPart>;
    name: Identifier;
    type: Identifier;
}
export interface VariableInit {
    kind: ASTKinds.VariableInit;
    decl: VariableDeclaration;
    value: VariableInit_$0;
}
export type VariableInit_$0 = VariableInit_$0_1 | VariableInit_$0_2;
export type VariableInit_$0_1 = FunctionCall;
export type VariableInit_$0_2 = Expression;
export interface Assignment {
    kind: ASTKinds.Assignment;
    variable: Identifier;
    value: Assignment_$0;
}
export type Assignment_$0 = Assignment_$0_1 | Assignment_$0_2;
export type Assignment_$0_1 = FunctionCall;
export type Assignment_$0_2 = Expression;
export interface FunctionDeclaration {
    kind: ASTKinds.FunctionDeclaration;
    decorator: Nullable<DecoratorPart>;
    name: Identifier;
    block: Block;
}
export type PositionalArgument = PositionalArgument_1 | PositionalArgument_2;
export type PositionalArgument_1 = Expression;
export type PositionalArgument_2 = Block;
export interface NamedArgument {
    kind: ASTKinds.NamedArgument;
    name: Identifier;
    value: NamedArgument_$0;
}
export type NamedArgument_$0 = NamedArgument_$0_1 | NamedArgument_$0_2;
export type NamedArgument_$0_1 = Expression;
export type NamedArgument_$0_2 = Block;
export type Argument = Argument_1 | Argument_2;
export type Argument_1 = NamedArgument;
export type Argument_2 = PositionalArgument;
export interface ArgumentsList {
    kind: ASTKinds.ArgumentsList;
    list: ArgumentsList_$0[];
    last: Nullable<Argument>;
}
export interface ArgumentsList_$0 {
    kind: ASTKinds.ArgumentsList_$0;
    arg: Argument;
}
export interface FunctionCall {
    kind: ASTKinds.FunctionCall;
    fn: Identifier;
    args: ArgumentsList;
    lastFnArg: Nullable<Block>;
}
export type Compare = Compare_1 | Compare_2 | Compare_3 | Compare_4 | Compare_5 | Compare_6;
export type Compare_1 = CompareEqual;
export type Compare_2 = CompareNotEqual;
export type Compare_3 = CompareGreaterThan;
export type Compare_4 = CompareLessThan;
export type Compare_5 = CompareGreaterThanOrEqual;
export type Compare_6 = CompareLessThanOrEqual;
export interface Comparison {
    kind: ASTKinds.Comparison;
    left: Expression;
    comparison: Compare;
    right: Expression;
}
export type CompareEqual = string;
export type CompareNotEqual = string;
export type CompareGreaterThan = string;
export type CompareLessThan = string;
export type CompareGreaterThanOrEqual = string;
export type CompareLessThanOrEqual = string;
export interface String {
    kind: ASTKinds.String;
    value: string;
}
export interface Identifier {
    kind: ASTKinds.Identifier;
    value: string;
}
export interface Int {
    kind: ASTKinds.Int;
    value: string;
}
export interface _ {
    kind: ASTKinds._;
    _ws: string;
}
export interface _B {
    kind: ASTKinds._B;
    _ws: string;
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    private $scope$Expression$memo: Map<number, [Nullable<Expression>, PosInfo]> = new Map();
    public matchMainProgram($$dpth: number, $$cr?: ErrorTracker): Nullable<MainProgram> {
        return this.runner<MainProgram>($$dpth,
            () => {
                let $scope$prog: Nullable<Program>;
                let $$res: Nullable<MainProgram> = null;
                if (true
                    && ($scope$prog = this.matchProgram($$dpth + 1, $$cr)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.MainProgram, prog: $scope$prog};
                }
                return $$res;
            })();
    }
    public matchProgram($$dpth: number, $$cr?: ErrorTracker): Nullable<Program> {
        return this.runner<Program>($$dpth,
            () => {
                let $scope$x: Nullable<Program_$0[]>;
                let $$res: Nullable<Program> = null;
                if (true
                    && ($scope$x = this.loop<Program_$0>(() => this.matchProgram_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Program, x: $scope$x};
                }
                return $$res;
            })();
    }
    public matchProgram_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Program_$0> {
        return this.choice<Program_$0>([
            () => this.matchProgram_$0_1($$dpth + 1, $$cr),
            () => this.matchProgram_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchProgram_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Program_$0_1> {
        return this.runner<Program_$0_1>($$dpth,
            () => {
                let $scope$y: Nullable<Program_$0_$0>;
                let $$res: Nullable<Program_$0_1> = null;
                if (true
                    && ($scope$y = this.matchProgram_$0_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Program_$0_1, y: $scope$y};
                }
                return $$res;
            })();
    }
    public matchProgram_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Program_$0_2> {
        return this.match_B($$dpth + 1, $$cr);
    }
    public matchProgram_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Program_$0_$0> {
        return this.runner<Program_$0_$0>($$dpth,
            () => {
                let $scope$statement: Nullable<Statement>;
                let $$res: Nullable<Program_$0_$0> = null;
                if (true
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$statement = this.matchStatement($$dpth + 1, $$cr)) !== null
                    && ((this.match_B($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.Program_$0_$0, statement: $scope$statement};
                }
                return $$res;
            })();
    }
    public matchBlock($$dpth: number, $$cr?: ErrorTracker): Nullable<Block> {
        return this.runner<Block>($$dpth,
            () => {
                let $scope$program: Nullable<Program>;
                let $$res: Nullable<Block> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_B($$dpth + 1, $$cr)) || true)
                    && ($scope$program = this.matchProgram($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Block, program: $scope$program};
                }
                return $$res;
            })();
    }
    public matchExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression> {
        const fn = () => {
            return this.choice<Expression>([
                () => this.matchExpression_1($$dpth + 1, $$cr),
                () => this.matchExpression_2($$dpth + 1, $$cr),
                () => this.matchExpression_3($$dpth + 1, $$cr),
                () => this.matchExpression_4($$dpth + 1, $$cr),
                () => this.matchExpression_5($$dpth + 1, $$cr),
                () => this.matchExpression_6($$dpth + 1, $$cr),
                () => this.matchExpression_7($$dpth + 1, $$cr),
            ]);
        };
        const pos = this.mark();
        const memo = this.$scope$Expression$memo.get(pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        this.$scope$Expression$memo.set(pos.overallPos, [null, pos]);
        let lastRes: Nullable<Expression> = null;
        let lastPos: PosInfo = pos;
        for(;;) {
            this.reset(pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$Expression$memo.set(pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        return lastRes;
    }
    public matchExpression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_1> {
        return this.runner<Expression_1>($$dpth,
            () => {
                let $scope$sub: Nullable<Expression_$0>;
                let $$res: Nullable<Expression_1> = null;
                if (true
                    && ($scope$sub = this.matchExpression_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Expression_1, sub: $scope$sub};
                }
                return $$res;
            })();
    }
    public matchExpression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_2> {
        return this.matchComparison($$dpth + 1, $$cr);
    }
    public matchExpression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_3> {
        return this.matchMaths($$dpth + 1, $$cr);
    }
    public matchExpression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_4> {
        return this.matchIdentifier($$dpth + 1, $$cr);
    }
    public matchExpression_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_5> {
        return this.matchInt($$dpth + 1, $$cr);
    }
    public matchExpression_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_6> {
        return this.matchString($$dpth + 1, $$cr);
    }
    public matchExpression_7($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_7> {
        return this.matchCoordinate($$dpth + 1, $$cr);
    }
    public matchExpression_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression_$0> {
        return this.runner<Expression_$0>($$dpth,
            () => {
                let $scope$val: Nullable<Expression>;
                let $$res: Nullable<Expression_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$val = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Expression_$0, val: $scope$val};
                }
                return $$res;
            })();
    }
    public matchStatement($$dpth: number, $$cr?: ErrorTracker): Nullable<Statement> {
        return this.choice<Statement>([
            () => this.matchStatement_1($$dpth + 1, $$cr),
            () => this.matchStatement_2($$dpth + 1, $$cr),
            () => this.matchStatement_3($$dpth + 1, $$cr),
            () => this.matchStatement_4($$dpth + 1, $$cr),
            () => this.matchStatement_5($$dpth + 1, $$cr),
        ]);
    }
    public matchStatement_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Statement_1> {
        return this.matchVariableInit($$dpth + 1, $$cr);
    }
    public matchStatement_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Statement_2> {
        return this.matchVariableDeclaration($$dpth + 1, $$cr);
    }
    public matchStatement_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Statement_3> {
        return this.matchFunctionDeclaration($$dpth + 1, $$cr);
    }
    public matchStatement_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Statement_4> {
        return this.matchFunctionCall($$dpth + 1, $$cr);
    }
    public matchStatement_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Statement_5> {
        return this.matchAssignment($$dpth + 1, $$cr);
    }
    public matchMaths($$dpth: number, $$cr?: ErrorTracker): Nullable<Maths> {
        return this.runner<Maths>($$dpth,
            () => {
                let $scope$left: Nullable<Expression>;
                let $scope$op: Nullable<Maths_$0>;
                let $scope$right: Nullable<Expression>;
                let $$res: Nullable<Maths> = null;
                if (true
                    && ($scope$left = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$op = this.matchMaths_$0($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$right = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Maths, left: $scope$left, op: $scope$op, right: $scope$right};
                }
                return $$res;
            })();
    }
    public matchMaths_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Maths_$0> {
        return this.choice<Maths_$0>([
            () => this.matchMaths_$0_1($$dpth + 1, $$cr),
            () => this.matchMaths_$0_2($$dpth + 1, $$cr),
            () => this.matchMaths_$0_3($$dpth + 1, $$cr),
            () => this.matchMaths_$0_4($$dpth + 1, $$cr),
            () => this.matchMaths_$0_5($$dpth + 1, $$cr),
        ]);
    }
    public matchMaths_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Maths_$0_1> {
        return this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr);
    }
    public matchMaths_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Maths_$0_2> {
        return this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr);
    }
    public matchMaths_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Maths_$0_3> {
        return this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr);
    }
    public matchMaths_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Maths_$0_4> {
        return this.regexAccept(String.raw`(?:\/)`, $$dpth + 1, $$cr);
    }
    public matchMaths_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Maths_$0_5> {
        return this.regexAccept(String.raw`(?:\%)`, $$dpth + 1, $$cr);
    }
    public matchCoordinateValue($$dpth: number, $$cr?: ErrorTracker): Nullable<CoordinateValue> {
        return this.choice<CoordinateValue>([
            () => this.matchCoordinateValue_1($$dpth + 1, $$cr),
            () => this.matchCoordinateValue_2($$dpth + 1, $$cr),
            () => this.matchCoordinateValue_3($$dpth + 1, $$cr),
        ]);
    }
    public matchCoordinateValue_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CoordinateValue_1> {
        return this.runner<CoordinateValue_1>($$dpth,
            () => {
                let $scope$relative: Nullable<CoordinateValue_$0>;
                let $$res: Nullable<CoordinateValue_1> = null;
                if (true
                    && ($scope$relative = this.matchCoordinateValue_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CoordinateValue_1, relative: $scope$relative};
                }
                return $$res;
            })();
    }
    public matchCoordinateValue_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CoordinateValue_2> {
        return this.runner<CoordinateValue_2>($$dpth,
            () => {
                let $scope$local: Nullable<CoordinateValue_$1>;
                let $$res: Nullable<CoordinateValue_2> = null;
                if (true
                    && ($scope$local = this.matchCoordinateValue_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CoordinateValue_2, local: $scope$local};
                }
                return $$res;
            })();
    }
    public matchCoordinateValue_3($$dpth: number, $$cr?: ErrorTracker): Nullable<CoordinateValue_3> {
        return this.runner<CoordinateValue_3>($$dpth,
            () => {
                let $scope$absolute: Nullable<Int>;
                let $$res: Nullable<CoordinateValue_3> = null;
                if (true
                    && ($scope$absolute = this.matchInt($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CoordinateValue_3, absolute: $scope$absolute};
                }
                return $$res;
            })();
    }
    public matchCoordinateValue_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CoordinateValue_$0> {
        return this.runner<CoordinateValue_$0>($$dpth,
            () => {
                let $scope$pos: Nullable<Nullable<Int>>;
                let $$res: Nullable<CoordinateValue_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:~)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && (($scope$pos = this.matchInt($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.CoordinateValue_$0, pos: $scope$pos};
                }
                return $$res;
            })();
    }
    public matchCoordinateValue_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<CoordinateValue_$1> {
        return this.runner<CoordinateValue_$1>($$dpth,
            () => {
                let $scope$pos: Nullable<Nullable<Int>>;
                let $$res: Nullable<CoordinateValue_$1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:^)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && (($scope$pos = this.matchInt($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.CoordinateValue_$1, pos: $scope$pos};
                }
                return $$res;
            })();
    }
    public matchCoordinate($$dpth: number, $$cr?: ErrorTracker): Nullable<Coordinate> {
        return this.runner<Coordinate>($$dpth,
            () => {
                let $scope$x: Nullable<CoordinateValue>;
                let $scope$y: Nullable<CoordinateValue>;
                let $scope$z: Nullable<CoordinateValue>;
                let $$res: Nullable<Coordinate> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$x = this.matchCoordinateValue($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$y = this.matchCoordinateValue($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$z = this.matchCoordinateValue($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Coordinate, x: $scope$x, y: $scope$y, z: $scope$z};
                }
                return $$res;
            })();
    }
    public matchIdentifierList($$dpth: number, $$cr?: ErrorTracker): Nullable<IdentifierList> {
        return this.runner<IdentifierList>($$dpth,
            () => {
                let $scope$list: Nullable<IdentifierList_$0[]>;
                let $scope$last: Nullable<Identifier>;
                let $$res: Nullable<IdentifierList> = null;
                if (true
                    && ($scope$list = this.loop<IdentifierList_$0>(() => this.matchIdentifierList_$0($$dpth + 1, $$cr), true)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$last = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.IdentifierList, list: $scope$list, last: $scope$last};
                }
                return $$res;
            })();
    }
    public matchIdentifierList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<IdentifierList_$0> {
        return this.runner<IdentifierList_$0>($$dpth,
            () => {
                let $scope$val: Nullable<Identifier>;
                let $$res: Nullable<IdentifierList_$0> = null;
                if (true
                    && ($scope$val = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.IdentifierList_$0, val: $scope$val};
                }
                return $$res;
            })();
    }
    public matchDecoratorItem($$dpth: number, $$cr?: ErrorTracker): Nullable<DecoratorItem> {
        return this.runner<DecoratorItem>($$dpth,
            () => {
                let $scope$name: Nullable<Identifier>;
                let $scope$args: Nullable<Nullable<DecoratorItem_$0>>;
                let $$res: Nullable<DecoratorItem> = null;
                if (true
                    && ($scope$name = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && (($scope$args = this.matchDecoratorItem_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.DecoratorItem, name: $scope$name, args: $scope$args};
                }
                return $$res;
            })();
    }
    public matchDecoratorItem_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<DecoratorItem_$0> {
        return this.runner<DecoratorItem_$0>($$dpth,
            () => {
                let $scope$args: Nullable<ArgumentsList>;
                let $$res: Nullable<DecoratorItem_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$args = this.matchArgumentsList($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.DecoratorItem_$0, args: $scope$args};
                }
                return $$res;
            })();
    }
    public matchDecoratorList($$dpth: number, $$cr?: ErrorTracker): Nullable<DecoratorList> {
        return this.runner<DecoratorList>($$dpth,
            () => {
                let $scope$first: Nullable<DecoratorItem>;
                let $scope$list: Nullable<DecoratorList_$0[]>;
                let $$res: Nullable<DecoratorList> = null;
                if (true
                    && ($scope$first = this.matchDecoratorItem($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$list = this.loop<DecoratorList_$0>(() => this.matchDecoratorList_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.DecoratorList, first: $scope$first, list: $scope$list};
                }
                return $$res;
            })();
    }
    public matchDecoratorList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<DecoratorList_$0> {
        return this.runner<DecoratorList_$0>($$dpth,
            () => {
                let $scope$item: Nullable<DecoratorItem>;
                let $$res: Nullable<DecoratorList_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$item = this.matchDecoratorItem($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.DecoratorList_$0, item: $scope$item};
                }
                return $$res;
            })();
    }
    public matchDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<Decorator> {
        return this.runner<Decorator>($$dpth,
            () => {
                let $scope$items: Nullable<DecoratorList>;
                let $$res: Nullable<Decorator> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#\[)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$items = this.matchDecoratorList($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Decorator, items: $scope$items};
                }
                return $$res;
            })();
    }
    public matchDecoratorPart($$dpth: number, $$cr?: ErrorTracker): Nullable<DecoratorPart> {
        return this.runner<DecoratorPart>($$dpth,
            () => {
                let $scope$decorator: Nullable<Decorator>;
                let $$res: Nullable<DecoratorPart> = null;
                if (true
                    && ($scope$decorator = this.matchDecorator($$dpth + 1, $$cr)) !== null
                    && ((this.match_B($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.DecoratorPart, decorator: $scope$decorator};
                }
                return $$res;
            })();
    }
    public matchVariableDeclaration($$dpth: number, $$cr?: ErrorTracker): Nullable<VariableDeclaration> {
        return this.runner<VariableDeclaration>($$dpth,
            () => {
                let $scope$decorator: Nullable<Nullable<DecoratorPart>>;
                let $scope$name: Nullable<Identifier>;
                let $scope$type: Nullable<Identifier>;
                let $$res: Nullable<VariableDeclaration> = null;
                if (true
                    && (($scope$decorator = this.matchDecoratorPart($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:var)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$type = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.VariableDeclaration, decorator: $scope$decorator, name: $scope$name, type: $scope$type};
                }
                return $$res;
            })();
    }
    public matchVariableInit($$dpth: number, $$cr?: ErrorTracker): Nullable<VariableInit> {
        return this.runner<VariableInit>($$dpth,
            () => {
                let $scope$decl: Nullable<VariableDeclaration>;
                let $scope$value: Nullable<VariableInit_$0>;
                let $$res: Nullable<VariableInit> = null;
                if (true
                    && ($scope$decl = this.matchVariableDeclaration($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$value = this.matchVariableInit_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.VariableInit, decl: $scope$decl, value: $scope$value};
                }
                return $$res;
            })();
    }
    public matchVariableInit_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<VariableInit_$0> {
        return this.choice<VariableInit_$0>([
            () => this.matchVariableInit_$0_1($$dpth + 1, $$cr),
            () => this.matchVariableInit_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchVariableInit_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<VariableInit_$0_1> {
        return this.matchFunctionCall($$dpth + 1, $$cr);
    }
    public matchVariableInit_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<VariableInit_$0_2> {
        return this.matchExpression($$dpth + 1, $$cr);
    }
    public matchAssignment($$dpth: number, $$cr?: ErrorTracker): Nullable<Assignment> {
        return this.runner<Assignment>($$dpth,
            () => {
                let $scope$variable: Nullable<Identifier>;
                let $scope$value: Nullable<Assignment_$0>;
                let $$res: Nullable<Assignment> = null;
                if (true
                    && ($scope$variable = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$value = this.matchAssignment_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Assignment, variable: $scope$variable, value: $scope$value};
                }
                return $$res;
            })();
    }
    public matchAssignment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Assignment_$0> {
        return this.choice<Assignment_$0>([
            () => this.matchAssignment_$0_1($$dpth + 1, $$cr),
            () => this.matchAssignment_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchAssignment_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Assignment_$0_1> {
        return this.matchFunctionCall($$dpth + 1, $$cr);
    }
    public matchAssignment_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Assignment_$0_2> {
        return this.matchExpression($$dpth + 1, $$cr);
    }
    public matchFunctionDeclaration($$dpth: number, $$cr?: ErrorTracker): Nullable<FunctionDeclaration> {
        return this.runner<FunctionDeclaration>($$dpth,
            () => {
                let $scope$decorator: Nullable<Nullable<DecoratorPart>>;
                let $scope$name: Nullable<Identifier>;
                let $scope$block: Nullable<Block>;
                let $$res: Nullable<FunctionDeclaration> = null;
                if (true
                    && (($scope$decorator = this.matchDecoratorPart($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:fn)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\(\))`, $$dpth + 1, $$cr) !== null
                    && ((this.match_B($$dpth + 1, $$cr)) || true)
                    && ($scope$block = this.matchBlock($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FunctionDeclaration, decorator: $scope$decorator, name: $scope$name, block: $scope$block};
                }
                return $$res;
            })();
    }
    public matchPositionalArgument($$dpth: number, $$cr?: ErrorTracker): Nullable<PositionalArgument> {
        return this.choice<PositionalArgument>([
            () => this.matchPositionalArgument_1($$dpth + 1, $$cr),
            () => this.matchPositionalArgument_2($$dpth + 1, $$cr),
        ]);
    }
    public matchPositionalArgument_1($$dpth: number, $$cr?: ErrorTracker): Nullable<PositionalArgument_1> {
        return this.matchExpression($$dpth + 1, $$cr);
    }
    public matchPositionalArgument_2($$dpth: number, $$cr?: ErrorTracker): Nullable<PositionalArgument_2> {
        return this.matchBlock($$dpth + 1, $$cr);
    }
    public matchNamedArgument($$dpth: number, $$cr?: ErrorTracker): Nullable<NamedArgument> {
        return this.runner<NamedArgument>($$dpth,
            () => {
                let $scope$name: Nullable<Identifier>;
                let $scope$value: Nullable<NamedArgument_$0>;
                let $$res: Nullable<NamedArgument> = null;
                if (true
                    && ($scope$name = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$value = this.matchNamedArgument_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NamedArgument, name: $scope$name, value: $scope$value};
                }
                return $$res;
            })();
    }
    public matchNamedArgument_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NamedArgument_$0> {
        return this.choice<NamedArgument_$0>([
            () => this.matchNamedArgument_$0_1($$dpth + 1, $$cr),
            () => this.matchNamedArgument_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchNamedArgument_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<NamedArgument_$0_1> {
        return this.matchExpression($$dpth + 1, $$cr);
    }
    public matchNamedArgument_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<NamedArgument_$0_2> {
        return this.matchBlock($$dpth + 1, $$cr);
    }
    public matchArgument($$dpth: number, $$cr?: ErrorTracker): Nullable<Argument> {
        return this.choice<Argument>([
            () => this.matchArgument_1($$dpth + 1, $$cr),
            () => this.matchArgument_2($$dpth + 1, $$cr),
        ]);
    }
    public matchArgument_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Argument_1> {
        return this.matchNamedArgument($$dpth + 1, $$cr);
    }
    public matchArgument_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Argument_2> {
        return this.matchPositionalArgument($$dpth + 1, $$cr);
    }
    public matchArgumentsList($$dpth: number, $$cr?: ErrorTracker): Nullable<ArgumentsList> {
        return this.runner<ArgumentsList>($$dpth,
            () => {
                let $scope$list: Nullable<ArgumentsList_$0[]>;
                let $scope$last: Nullable<Nullable<Argument>>;
                let $$res: Nullable<ArgumentsList> = null;
                if (true
                    && ($scope$list = this.loop<ArgumentsList_$0>(() => this.matchArgumentsList_$0($$dpth + 1, $$cr), true)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && (($scope$last = this.matchArgument($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.ArgumentsList, list: $scope$list, last: $scope$last};
                }
                return $$res;
            })();
    }
    public matchArgumentsList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ArgumentsList_$0> {
        return this.runner<ArgumentsList_$0>($$dpth,
            () => {
                let $scope$arg: Nullable<Argument>;
                let $$res: Nullable<ArgumentsList_$0> = null;
                if (true
                    && ($scope$arg = this.matchArgument($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.ArgumentsList_$0, arg: $scope$arg};
                }
                return $$res;
            })();
    }
    public matchFunctionCall($$dpth: number, $$cr?: ErrorTracker): Nullable<FunctionCall> {
        return this.runner<FunctionCall>($$dpth,
            () => {
                let $scope$fn: Nullable<Identifier>;
                let $scope$args: Nullable<ArgumentsList>;
                let $scope$lastFnArg: Nullable<Nullable<Block>>;
                let $$res: Nullable<FunctionCall> = null;
                if (true
                    && ($scope$fn = this.matchIdentifier($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$args = this.matchArgumentsList($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && ((this.match_B($$dpth + 1, $$cr)) || true)
                    && (($scope$lastFnArg = this.matchBlock($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.FunctionCall, fn: $scope$fn, args: $scope$args, lastFnArg: $scope$lastFnArg};
                }
                return $$res;
            })();
    }
    public matchCompare($$dpth: number, $$cr?: ErrorTracker): Nullable<Compare> {
        return this.choice<Compare>([
            () => this.matchCompare_1($$dpth + 1, $$cr),
            () => this.matchCompare_2($$dpth + 1, $$cr),
            () => this.matchCompare_3($$dpth + 1, $$cr),
            () => this.matchCompare_4($$dpth + 1, $$cr),
            () => this.matchCompare_5($$dpth + 1, $$cr),
            () => this.matchCompare_6($$dpth + 1, $$cr),
        ]);
    }
    public matchCompare_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Compare_1> {
        return this.matchCompareEqual($$dpth + 1, $$cr);
    }
    public matchCompare_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Compare_2> {
        return this.matchCompareNotEqual($$dpth + 1, $$cr);
    }
    public matchCompare_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Compare_3> {
        return this.matchCompareGreaterThan($$dpth + 1, $$cr);
    }
    public matchCompare_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Compare_4> {
        return this.matchCompareLessThan($$dpth + 1, $$cr);
    }
    public matchCompare_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Compare_5> {
        return this.matchCompareGreaterThanOrEqual($$dpth + 1, $$cr);
    }
    public matchCompare_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Compare_6> {
        return this.matchCompareLessThanOrEqual($$dpth + 1, $$cr);
    }
    public matchComparison($$dpth: number, $$cr?: ErrorTracker): Nullable<Comparison> {
        return this.runner<Comparison>($$dpth,
            () => {
                let $scope$left: Nullable<Expression>;
                let $scope$comparison: Nullable<Compare>;
                let $scope$right: Nullable<Expression>;
                let $$res: Nullable<Comparison> = null;
                if (true
                    && ($scope$left = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$comparison = this.matchCompare($$dpth + 1, $$cr)) !== null
                    && ((this.match_($$dpth + 1, $$cr)) || true)
                    && ($scope$right = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Comparison, left: $scope$left, comparison: $scope$comparison, right: $scope$right};
                }
                return $$res;
            })();
    }
    public matchCompareEqual($$dpth: number, $$cr?: ErrorTracker): Nullable<CompareEqual> {
        return this.regexAccept(String.raw`(?:==)`, $$dpth + 1, $$cr);
    }
    public matchCompareNotEqual($$dpth: number, $$cr?: ErrorTracker): Nullable<CompareNotEqual> {
        return this.regexAccept(String.raw`(?:!=)`, $$dpth + 1, $$cr);
    }
    public matchCompareGreaterThan($$dpth: number, $$cr?: ErrorTracker): Nullable<CompareGreaterThan> {
        return this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr);
    }
    public matchCompareLessThan($$dpth: number, $$cr?: ErrorTracker): Nullable<CompareLessThan> {
        return this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr);
    }
    public matchCompareGreaterThanOrEqual($$dpth: number, $$cr?: ErrorTracker): Nullable<CompareGreaterThanOrEqual> {
        return this.regexAccept(String.raw`(?:>=)`, $$dpth + 1, $$cr);
    }
    public matchCompareLessThanOrEqual($$dpth: number, $$cr?: ErrorTracker): Nullable<CompareLessThanOrEqual> {
        return this.regexAccept(String.raw`(?:<=)`, $$dpth + 1, $$cr);
    }
    public matchString($$dpth: number, $$cr?: ErrorTracker): Nullable<String> {
        return this.runner<String>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<String> = null;
                if (true
                    && ($scope$value = this.regexAccept(String.raw`(?:"(\\.|[^"\\])*")`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.String, value: $scope$value};
                }
                return $$res;
            })();
    }
    public matchIdentifier($$dpth: number, $$cr?: ErrorTracker): Nullable<Identifier> {
        return this.runner<Identifier>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<Identifier> = null;
                if (true
                    && ($scope$value = this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z0-9_]*)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Identifier, value: $scope$value};
                }
                return $$res;
            })();
    }
    public matchInt($$dpth: number, $$cr?: ErrorTracker): Nullable<Int> {
        return this.runner<Int>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<Int> = null;
                if (true
                    && ($scope$value = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Int, value: $scope$value};
                }
                return $$res;
            })();
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.runner<_>($$dpth,
            () => {
                let $scope$_ws: Nullable<string>;
                let $$res: Nullable<_> = null;
                if (true
                    && ($scope$_ws = this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds._, _ws: $scope$_ws};
                }
                return $$res;
            })();
    }
    public match_B($$dpth: number, $$cr?: ErrorTracker): Nullable<_B> {
        return this.runner<_B>($$dpth,
            () => {
                let $scope$_ws: Nullable<string>;
                let $$res: Nullable<_B> = null;
                if (true
                    && ($scope$_ws = this.regexAccept(String.raw`(?:(?:\s+|(?:\n)|(?:\/\/.*(?:\n|$)))+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds._B, _ws: $scope$_ws};
                }
                return $$res;
            })();
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchMainProgram(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchMainProgram(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.matchMainProgram(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private runner<T>($$dpth: number, fn: $$RuleType<T>): $$RuleType<T> {
        return () => {
            const mrk = this.mark();
            const res = fn()
            if (res !== null)
                return res;
            this.reset(mrk);
            return null;
        };
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.runner<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            })();
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<MainProgram>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}